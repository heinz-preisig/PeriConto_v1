"""
automaton definition for BrickSchema
"""
from graphviz import Digraph

UI_state = {
        "start"                         : {
                "show"  : [
                        "exit",
                        "ontology_create",
                        "ontology_load",
                        ],
                "except": [],
                "action": [],
                },
        # note: ontology
        "create ontology"               : {
                "show"  : ["exit",
                           "ontology_save",
                           "ontology_save_as",
                           # "tabs",
                           "brick_create",
                           ],
                "except": [],
                "action": ["OntologyCreate",
                           "BrickListPut",
                           "OntologyChanged", ],
                },
        "load ontology"                 : {
                "show"  : ["exit",
                           # "tabs",
                           "brick_create",
                           "brick_list",
                           "ontology_create",
                           # "tree_create",
                           # "tree_list",
                           ],
                "except": [],
                "action": ["OntologyLoad",
                           "BrickListPut",
                           ],
                },
        "save"                          : {
                "show"  : ["do_nothing"],
                "action": ["OntologySave"],
                },
        "save as"                       : {
                "show"  : ["do_nothing"],
                "action": ["OntologySaveWithNewName"],
                },
        # note: bricks
        "new brick"                     : {
                "show"  : ["exit",
                           "ontology_save",
                           "ontology_save_as",
                           # "tabs",
                           "brick_list",
                           "brick_create",
                           "brick_remove",
                           ],
                "except": [],
                "action": ["BrickNew",
                           "BrickListPut",
                           "OntologyChanged",
                           ],
                },
        "remove brick"                  : {
                "show"  : ["exit",
                           "tree_visualise",
                           "ontology_save",
                           "ontology_save_as",
                           # "tabs",
                           "brick_list",
                           "brick_create",
                           "brick_remove",
                           "brick_rename",
                           ],
                "except": [],
                "action": ["BrickRemove",
                           "BrickListPut",
                           # "putAllNames",
                           "OntologyChanged", ],
                },
        "selected brick"                : {
                "show"  : ["exit",
                           "tree_visualise",
                           "ontology_save",
                           "ontology_save_as",
                           # "tabs",
                           "brick_list",
                           "brick_create",
                           "brick_remove",
                           "brick_rename",
                           "brick_tree",
                           ],
                "except": [],
                "action": ["BrickSelected",
                           "BrickTreeShow",
                           "putAllNames",
                           ],
                },
        "rename brick"                  : {
                "show"  : ["exit",
                           "tree_visualise",
                           "ontology_save",
                           "ontology_save_as",
                           # "tabs",
                           "brick_list",
                           "brick_create",
                           "brick_remove",
                           "brick_rename",
                           ],
                "except": [],
                "action": ["BrickRename",
                           "BrickListPut",
                           "putAllNames",
                           "OntologyChanged", ],
                },
        # note: selection in brick tree
        "Class in brick tree selected"  : {
                "show"  : ["exit",
                           "tree_visualise",
                           "ontology_save",
                           "ontology_save_as",
                           "brick_list",
                           "brick_create",
                           "brick_tree",
                           "item_add",
                           "primitive_add",
                           ],
                "except": [],
                "action": ["BrickClassSelected"],
                },
        "is_member in brick tree selected" : {
                "show"  : ["exit",
                           "tree_visualise",
                           "ontology_save",
                           "ontology_save_as",
                           "brick_list",
                           # "brick_create",
                           # "brick_remove",
                           # "brick_rename",
                           "brick_tree",
                           "item_add",
                           "item_remove",
                           "item_rename",
                           "primitive_add",
                           ],
                "except": [],
                "action": ["BrickItemSelected"],
                },
        "value in brick tree selected"  : {
                "show"  : ["exit",
                           "tree_visualise",
                           "ontology_save",
                           "ontology_save_as",
                           "brick_list",
                           "brick_tree",
                           "brick_create",
                           "brick_remove",
                           "brick_rename",
                           "primitive_remove",
                           "primitive_rename",
                           "primitive_change",
                           ],
                "except": [],
                "action": ["BrickIValueSelected",
                           ],
                },
        "string in brick tree selected" : {
                "show"  : ["exit",
                           "tree_visualise",
                           "ontology_save",
                           "ontology_save_as",
                           "brick_list",
                           "brick_tree",
                           ],
                "except": [],
                "action": [],
                },
        "integer in brick tree selected": {
                "show"  : [
                        "exit",
                        "ontology_save",
                        "ontology_save_as",
                        "brick_list",
                        "brick_tree",
                        ],
                "except": [],
                "action": [],
                },
        "decimal in brick tree selected": {
                "show"  : ["exit",
                           "tree_visualise",
                           "ontology_save",
                           "ontology_save_as",
                           "brick_list",
                           "brick_tree",
                           ],
                "except": [],
                "action": [],
                },
        "uri in brick tree selected"    : {
                "show"  : ["exit",
                           "tree_visualise",
                           "ontology_save",
                           "ontology_save_as",
                           "brick_list",
                           "brick_tree",
                           ],
                "except": [],
                "action": [],
                },
        "boolean in brick tree selected": {
                "show"  : ["exit",
                           "tree_visualise",
                           "ontology_save",
                           "ontology_save_as",
                           "brick_list",
                           "brick_tree",
                           ],
                "except": [],
                "action": [],
                },
        # note: items
        "add item"                      : {
                "show": ["exit",
                         "tree_visualise",
                         "ontology_save",
                         "ontology_save_as",
                         "brick_list",
                         "brick_tree",
                         ], "except": [],
                "action": ["ItemAdd",
                           "BrickListPut",
                           "BrickTreeShow",
                           "putAllNames",
                           "OntologyChanged", ],
                },
        "remove item"                   : {
                "show"  : ["exit",
                           "tree_visualise",
                           "ontology_save",
                           "ontology_save_as",
                           "brick_list",
                           "brick_tree",
                           ],
                "except": [],
                "action": ["ItemRemove",
                           "OntologyChanged",
                           "BrickTreeShow",
                           "putAllNames",
                           ],
                },
        "rename item"                   : {
                "show"  : ["exit",
                           "tree_visualise",
                           "ontology_save",
                           "ontology_save_as",
                           "brick_list",
                           "brick_create",
                           "brick_remove",
                           "brick_rename",
                           "brick_tree",
                           ],
                "except": [],
                "action": ["ItemRename",
                           "OntologyChanged",
                           "BrickTreeShow",
                           "putAllNames",
                           ],
                },
        # note: primitives
        "add primitive"                 : {
                "show"  : ["exit",
                           "tree_visualise",
                           "ontology_save",
                           "ontology_save_as",
                           "brick_list",
                           "brick_tree",
                           ],
                "except": [],
                "action": ["PrimitiveAdd",
                           "BrickTreeShow",
                           "putAllNames",
                           "OntologyChanged", ],
                },
        "remove primitive"              : {
                "show"  : ["exit",
                           "tree_visualise",
                           "ontology_save",
                           "ontology_save_as",
                           "brick_list",
                           "brick_tree",
                           ],
                "except": [],
                "action": ["PrimitiveRemove",
                           "BrickTreeShow",
                           "putAllNames",
                           "OntologyChanged", ],
                },
        "rename primitive"                   : {
                "show"  : ["exit",
                           "tree_visualise",
                           "ontology_save",
                           "ontology_save_as",
                           "brick_list",
                           "brick_create",
                           "brick_remove",
                           "brick_rename",
                           "brick_tree",
                           ],
                "except": [],
                "action": ["PrimitiveRename",
                           "OntologyChanged",
                           "BrickTreeShow",
                           "putAllNames",
                           ],
                },
        "change primitive"              : {
                "show"  : ["exit",
                           "tree_visualise",
                           "ontology_save",
                           "ontology_save_as",
                           "brick_list",
                           "brick_tree",
                           ],
                "except": [],
                "action": ["PrimitiveChange",
                           "BrickTreeShow",
                           "putAllNames",
                           "OntologyChanged", ],
                },
        # "value rename"                  : {
        #         "show"  : ["exit",
        #                    "tree_visualise",
        #                    "ontology_save",
        #                    "ontology_save_as",
        #                    "brick_list",
        #                    "brick_create",
        #                    "brick_remove",
        #                    "brick_rename",
        #                    "brick_tree",
        #                    ],
        #         "except": [],
        #         "action": ["ItemRename",
        #                    "OntologyChanged",
        #                    "BrickTreeShow",
        #                    "putAllNames",
        #                    ],
        #         },
        # "member rename"                   : {
        #         "show"  : ["exit",
        #                    "tree_visualise",
        #                    "ontology_save",
        #                    "ontology_save_as",
        #                    "brick_list",
        #                    "brick_create",
        #                    "brick_remove",
        #                    "brick_rename",
        #                    "brick_tree",
        #                    ],
        #         "except": [],
        #         "action": ["ItemRename",
        #                    "putAllNames",
        #                    "OntologyChanged",
        #                    "BrickTreeShow",
        #                    ],
        #         },
        # note: tab changes
        "BrickVisualise"                     : {
                "show"  : ["do_nothing"],
                "action": ["BrickVisualise"],
                },
        }

NODE_SPECS = {
        "event" : {
                "colour"   : "red",
                "shape"    : "rectangle",
                "fillcolor": "red",
                "style"    : "filled",
                },
        "show"  : {
                "colour"   : "orange",
                "shape"    : "",
                "fillcolor": "white",
                "style"    : "filled",
                },
        "action": {
                "colour"   : "blue",
                "shape"    : "rectangle",
                "fillcolor": "white",
                "style"    : "filled",
                },
        }
EDGE_COLOURS = {
        "event" : "red",
        "show"  : "blue",
        "action": "darkorange",
        }


class AutomatonPlot:

  def __init__(self):
    self.dot = Digraph("PeriConto automaton")
    self.dot.graph_attr["rankdir"] = "LR"

  def makeAutomatonPlot(self):

    for n in sorted(UI_state):
      dot = self.dot
      specs = NODE_SPECS["event"]
      dot.node(n,
               color=specs["colour"],
               shape=specs["shape"],
               fillcolor=specs["fillcolor"],
               style=specs["style"],
               )
      show_node = "%s show" % n
      dot.node(show_node, style="filled", fillcolor="orange")
      dot.edge(n, show_node,
               color="green")
      dot.edge(n, show_node,
               color="red",
               )
      for s in UI_state[n]["show"]:
        dot.node(s,
                 color=specs["colour"],
                 shape=specs["shape"],
                 fillcolor=specs["fillcolor"],
                 style=specs["style"],
                 )
        dot.edge(show_node, s,
                 color="black")

      action_node = "%s action" % n
      dot.node(action_node, style="filled", fillcolor="green")
      dot.edge(n, action_node)
      for a in UI_state[n]["action"]:
        dot.node(a,
                 color=specs["colour"],
                 shape=specs["shape"],
                 fillcolor=specs["fillcolor"],
                 style=specs["style"],
                 )
        dot.edge(action_node, a,
                 color="blue")


if __name__ == "__main__":
  g = AutomatonPlot()
  g.makeAutomatonPlot()
  file_name = "../attic/brick_automaton"
  g.dot.render(file_name, format="pdf")
